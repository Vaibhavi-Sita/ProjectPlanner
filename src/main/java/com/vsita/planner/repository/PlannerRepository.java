package com.vsita.planner.repository;
import java.util.List;
import org.springframework.data.jpa.repository.JpaRepository;
import com.vsita.planner.model.PlannerData;

/*
    In order to start leveraging the Spring Data programming model with JPA,
    a DAO (Data Access Object ) interface needs to extend the JPA specific
    Repository interface, JpaRepository. This will enable Spring Data to find
    this interface and automatically create an implementation for it.

    By extending the interface, we get the most relevant CRUD methods for
    standard data access available in a standard DAO.
 */

public interface PlannerRepository extends JpaRepository<PlannerData, Long>
    /* Long is data type of Primarykey(RDBMS) or autogenerated unique document */
{

    /*
        Automatic Custom Queries ( magic, as I'd like to call it :P )
        When Spring Data creates a new Repository implementation,
        it analyses all the methods defined by the interfaces and
        tries to automatically generate queries from the method names.
        While this has some limitations, it's a very powerful and elegant
        way of defining new custom access methods with very little effort.

        source : https://www.baeldung.com/the-persistence-layer-with-spring-data-jpa
     */

    List<PlannerData> findByDone(boolean done);
    List<PlannerData> findByTitleContaining(String title);
}
